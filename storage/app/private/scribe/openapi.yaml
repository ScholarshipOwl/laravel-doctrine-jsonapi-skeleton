openapi: 3.0.3
info:
  title: 'Laravel Doctrine JSON:API Skeleton API Documentation'
  description: ''
  version: 1.0.0
servers:
  -
    url: '{{ config("app.url") }}'
tags:
  -
    name: Auth
    description: ''
  -
    name: Roles
    description: ''
  -
    name: Users
    description: ''
components:
  schemas:
    users:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
          properties:
            id:
              type: string
              example: '1'
            type:
              type: string
              example: users
              enum:
                - users
            attributes:
              type: object
              properties:
                name:
                  type: string
                  example: 'Okey Towne'
                email:
                  type: string
                  example: emilie87@example.org
            relationships:
              type: object
              properties:
                roles:
                  type: object
                  properties:
                    data:
                      type: object
                      required:
                        - id
                        - type
                      properties:
                        id:
                          type: string
                          example: '1'
                        type:
                          type: string
                          example: roles
                          enum:
                            - roles
    roles:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
          properties:
            id:
              type: string
              example: '1'
            type:
              type: string
              example: roles
              enum:
                - roles
            attributes:
              type: object
              properties:
                name:
                  type: string
                  example: sint
                permissions:
                  type: array
                  example: []
            relationships:
              type: object
              properties:
                users:
                  type: object
                  properties:
                    data:
                      type: object
                      required:
                        - id
                        - type
                      properties:
                        id:
                          type: string
                          example: '1'
                        type:
                          type: string
                          example: users
                          enum:
                            - users
paths:
  /auth/login:
    post:
      summary: Login
      operationId: login
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                properties:
                  id:
                    type: integer
                    example: 1
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                nullable: true
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: gbailey@example.net
                  nullable: false
                password:
                  type: string
                  description: ''
                  example: '|]|{+-'
                  nullable: false
              required:
                - email
                - password
      security: []
  /auth/request-reset-password:
    post:
      summary: 'Request password reset'
      operationId: requestPasswordReset
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: 'Password reset link sent'
                properties:
                  status:
                    type: string
                    example: 'Password reset link sent'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: 'Failed to send password reset link'
                properties:
                  status:
                    type: string
                    example: 'Failed to send password reset link'
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: gbailey@example.net
                  nullable: false
              required:
                - email
      security: []
  /auth/reset-password:
    post:
      summary: 'Reset password'
      operationId: resetPassword
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: 'Password reset'
                properties:
                  status:
                    type: string
                    example: 'Password reset'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: 'Failed to reset password'
                properties:
                  status:
                    type: string
                    example: 'Failed to reset password'
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: gbailey@example.net
                  nullable: false
                password:
                  type: string
                  description: 'Must be at least 8 characters.'
                  example: '+-0pBNvYgxwmi/#iw'
                  nullable: false
                token:
                  type: string
                  description: ''
                  example: architecto
                  nullable: false
              required:
                - email
                - password
                - token
      security: []
  /auth/logout:
    post:
      summary: Logout
      operationId: logout
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: 'Logged out successfully'
                properties:
                  status:
                    type: string
                    example: 'Logged out successfully'
      tags:
        - Auth
      security: []
  /roles:
    get:
      summary: 'List Roles'
      operationId: listRoles
      description: 'Retrieve a list of Roles.'
      parameters:
        -
          in: query
          name: 'fields[roles]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `permissions`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `permissions`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `users`"
          example: users
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `users`"
            example: users
            nullable: false
        -
          in: query
          name: 'page[number]'
          description: 'Page number. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
          example: 1
          required: false
          schema:
            type: number
            description: 'Page number. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
            example: 1
            nullable: false
        -
          in: query
          name: 'page[size]'
          description: 'Number of results per page. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
          example: 10
          required: false
          schema:
            type: number
            description: 'Number of results per page. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
            example: 10
            nullable: false
        -
          in: query
          name: sort
          description: "Sort the results by attributes. Prefix with `-` for descending order. ([Spec](https://jsonapi.org/format/#fetching-sorting))\n\n**Available sort fields:** `name`, `permissions`"
          required: false
          schema:
            type: string
            description: "Sort the results by attributes. Prefix with `-` for descending order. ([Spec](https://jsonapi.org/format/#fetching-sorting))\n\n**Available sort fields:** `name`, `permissions`"
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      type: roles
                      id: '1'
                      attributes:
                        name: et
                        permissions: []
                      links:
                        self: /roles/1
                    -
                      type: roles
                      id: '2'
                      attributes:
                        name: tenetur
                        permissions: []
                      links:
                        self: /roles/2
                    -
                      type: roles
                      id: '3'
                      attributes:
                        name: ab
                        permissions: []
                      links:
                        self: /roles/3
                  meta:
                    pagination:
                      total: 100
                      count: 20
                      per_page: 3
                      current_page: 1
                      total_pages: 5
                  links:
                    self: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    first: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    next: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    last: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                properties:
                  data:
                    type: array
                    example:
                      -
                        type: roles
                        id: '1'
                        attributes:
                          name: et
                          permissions: []
                        links:
                          self: /roles/1
                      -
                        type: roles
                        id: '2'
                        attributes:
                          name: tenetur
                          permissions: []
                        links:
                          self: /roles/2
                      -
                        type: roles
                        id: '3'
                        attributes:
                          name: ab
                          permissions: []
                        links:
                          self: /roles/3
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: roles
                        id:
                          type: string
                          example: '1'
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                              example: et
                            permissions:
                              type: array
                              example: []
                        links:
                          type: object
                          properties:
                            self:
                              type: string
                              example: /roles/1
                  meta:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 100
                          count:
                            type: integer
                            example: 20
                          per_page:
                            type: integer
                            example: 3
                          current_page:
                            type: integer
                            example: 1
                          total_pages:
                            type: integer
                            example: 5
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      first:
                        type: string
                        example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      next:
                        type: string
                        example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      last:
                        type: string
                        example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Roles
      security: []
    post:
      summary: 'Create Role'
      operationId: createRole
      description: 'Create a new Role.'
      parameters:
        -
          in: query
          name: 'fields[roles]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `permissions`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `permissions`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `users`"
          example: users
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `users`"
            example: users
            nullable: false
      responses:
        201:
          description: 'Created resource.'
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: roles
                    id: '1'
                    attributes:
                      name: eius
                      permissions: []
                    links:
                      self: /roles/1
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: roles
                      id:
                        type: string
                        example: '1'
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: eius
                          permissions:
                            type: array
                            example: []
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /roles/1
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      nullable: false
                      properties:
                        name:
                          type: string
                          description: 'Must not be greater than 255 characters.'
                          example: b
                          nullable: false
                        permissions:
                          type: object
                          description: ''
                          example: null
                          nullable: false
                          properties: {  }
                    relationships:
                      type: object
                      description: ''
                      nullable: false
                      properties:
                        users:
                          type: object
                          description: ''
                          nullable: false
                          properties:
                            data:
                              type: object
                              description: 'The resource identifier for a Users.'
                              example:
                                id: '1'
                                type: users
                              nullable: false
                              properties: {  }
                          required:
                            - data
              required:
                - data
      security: []
  '/roles/{id}':
    get:
      summary: 'Show Role'
      operationId: showRole
      description: 'Retrieve a specific Role by ID.'
      parameters:
        -
          in: query
          name: 'fields[roles]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `permissions`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `permissions`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `users`"
          example: users
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `users`"
            example: users
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: roles
                    id: '1'
                    attributes:
                      name: quos
                      permissions: []
                    links:
                      self: /roles/1
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: roles
                      id:
                        type: string
                        example: '1'
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: quos
                          permissions:
                            type: array
                            example: []
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /roles/1
      tags:
        - Roles
      security: []
    patch:
      summary: 'Update Role'
      operationId: updateRole
      description: 'Update a specific Role by ID.'
      parameters:
        -
          in: query
          name: 'fields[roles]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `permissions`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `permissions`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `users`"
          example: users
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `users`"
            example: users
            nullable: false
      responses:
        200:
          description: 'The updated resource.'
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: roles
                    id: '1'
                    attributes:
                      name: fugiat
                      permissions: []
                    links:
                      self: /roles/1
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: roles
                      id:
                        type: string
                        example: '1'
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: fugiat
                          permissions:
                            type: array
                            example: []
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /roles/1
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      nullable: false
                      properties:
                        name:
                          type: string
                          description: 'Must not be greater than 255 characters.'
                          example: b
                          nullable: false
                        permissions:
                          type: object
                          description: ''
                          example: null
                          nullable: false
                          properties: {  }
                    relationships:
                      type: object
                      description: ''
                      nullable: false
                      properties:
                        users:
                          type: object
                          description: ''
                          nullable: false
                          properties:
                            data:
                              type: object
                              description: 'The resource identifier for a Users.'
                              example:
                                id: '1'
                                type: users
                              nullable: false
                              properties: {  }
                          required:
                            - data
              required:
                - data
      security: []
    delete:
      summary: 'Delete Role'
      operationId: deleteRole
      description: 'Delete a specific Role by ID.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - Roles
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'roles' resource"
        example: 1
        required: true
        schema:
          type: number
  '/roles/{id}/users':
    get:
      summary: 'List related Users'
      operationId: listRelatedUsers
      description: 'Retrieve the list of related Users for a specific Role.'
      parameters:
        -
          in: query
          name: 'fields[roles]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `permissions`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `permissions`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `users`"
          example: users
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `users`"
            example: users
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: users
                          id: '1'
                          attributes:
                            name: 'Jermaine Tillman'
                            email: pfritsch@example.com
                          links:
                            self: /users/1
                        -
                          type: users
                          id: '2'
                          attributes:
                            name: 'Carey Smitham'
                            email: tleuschke@example.net
                          links:
                            self: /users/2
                        -
                          type: users
                          id: '3'
                          attributes:
                            name: 'Janick Schultz DDS'
                            email: kconsidine@example.net
                          links:
                            self: /users/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: users
                            id: '1'
                            attributes:
                              name: 'Jermaine Tillman'
                              email: pfritsch@example.com
                            links:
                              self: /users/1
                          -
                            type: users
                            id: '2'
                            attributes:
                              name: 'Carey Smitham'
                              email: tleuschke@example.net
                            links:
                              self: /users/2
                          -
                            type: users
                            id: '3'
                            attributes:
                              name: 'Janick Schultz DDS'
                              email: kconsidine@example.net
                            links:
                              self: /users/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: users
                            id:
                              type: string
                              example: '1'
                            attributes:
                              type: object
                              properties:
                                name:
                                  type: string
                                  example: 'Jermaine Tillman'
                                email:
                                  type: string
                                  example: pfritsch@example.com
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /users/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: users
                          id: '1'
                          attributes:
                            name: 'Kirstin Nitzsche V'
                            email: verlie08@example.net
                          links:
                            self: /users/1
                        -
                          type: users
                          id: '2'
                          attributes:
                            name: 'Cynthia Fahey'
                            email: balistreri.josiane@example.net
                          links:
                            self: /users/2
                        -
                          type: users
                          id: '3'
                          attributes:
                            name: "Rodrigo O'Connell"
                            email: emanuel.emmerich@example.org
                          links:
                            self: /users/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: users
                            id: '1'
                            attributes:
                              name: 'Kirstin Nitzsche V'
                              email: verlie08@example.net
                            links:
                              self: /users/1
                          -
                            type: users
                            id: '2'
                            attributes:
                              name: 'Cynthia Fahey'
                              email: balistreri.josiane@example.net
                            links:
                              self: /users/2
                          -
                            type: users
                            id: '3'
                            attributes:
                              name: "Rodrigo O'Connell"
                              email: emanuel.emmerich@example.org
                            links:
                              self: /users/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: users
                            id:
                              type: string
                              example: '1'
                            attributes:
                              type: object
                              properties:
                                name:
                                  type: string
                                  example: 'Kirstin Nitzsche V'
                                email:
                                  type: string
                                  example: verlie08@example.net
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /users/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Roles
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'roles' resource"
        example: 1
        required: true
        schema:
          type: number
  '/roles/{id}/relationships/users':
    get:
      summary: 'Show Users relationships'
      operationId: showUsersRelationships
      description: 'Retrieve the identifiers of the related Users for a specific Role.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: users
                          id: '1'
                          links:
                            self: /users/1
                        -
                          type: users
                          id: '2'
                          links:
                            self: /users/2
                        -
                          type: users
                          id: '3'
                          links:
                            self: /users/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: users
                            id: '1'
                            links:
                              self: /users/1
                          -
                            type: users
                            id: '2'
                            links:
                              self: /users/2
                          -
                            type: users
                            id: '3'
                            links:
                              self: /users/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: users
                            id:
                              type: string
                              example: '1'
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /users/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: users
                          id: '1'
                          links:
                            self: /users/1
                        -
                          type: users
                          id: '2'
                          links:
                            self: /users/2
                        -
                          type: users
                          id: '3'
                          links:
                            self: /users/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: users
                            id: '1'
                            links:
                              self: /users/1
                          -
                            type: users
                            id: '2'
                            links:
                              self: /users/2
                          -
                            type: users
                            id: '3'
                            links:
                              self: /users/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: users
                            id:
                              type: string
                              example: '1'
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /users/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Roles
      security: []
    post:
      summary: 'Add to Users relationships'
      operationId: addToUsersRelationships
      description: 'Add identifiers to the Users relationship of a specific Role.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: users
                          id: '1'
                          links:
                            self: /users/1
                        -
                          type: users
                          id: '2'
                          links:
                            self: /users/2
                        -
                          type: users
                          id: '3'
                          links:
                            self: /users/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: users
                            id: '1'
                            links:
                              self: /users/1
                          -
                            type: users
                            id: '2'
                            links:
                              self: /users/2
                          -
                            type: users
                            id: '3'
                            links:
                              self: /users/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: users
                            id:
                              type: string
                              example: '1'
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /users/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: users
                          id: '1'
                          links:
                            self: /users/1
                        -
                          type: users
                          id: '2'
                          links:
                            self: /users/2
                        -
                          type: users
                          id: '3'
                          links:
                            self: /users/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: users
                            id: '1'
                            links:
                              self: /users/1
                          -
                            type: users
                            id: '2'
                            links:
                              self: /users/2
                          -
                            type: users
                            id: '3'
                            links:
                              self: /users/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: users
                            id:
                              type: string
                              example: '1'
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /users/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: 'The resource identifier for a Users.'
                  example:
                    -
                      id: '1'
                      type: users
                  items:
                    type: object
              required:
                - data
      security: []
    patch:
      summary: 'Update Users relationships'
      operationId: updateUsersRelationships
      description: 'Replace all identifiers in the Users relationship of a specific Role.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: users
                          id: '1'
                          links:
                            self: /users/1
                        -
                          type: users
                          id: '2'
                          links:
                            self: /users/2
                        -
                          type: users
                          id: '3'
                          links:
                            self: /users/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: users
                            id: '1'
                            links:
                              self: /users/1
                          -
                            type: users
                            id: '2'
                            links:
                              self: /users/2
                          -
                            type: users
                            id: '3'
                            links:
                              self: /users/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: users
                            id:
                              type: string
                              example: '1'
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /users/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: users
                          id: '1'
                          links:
                            self: /users/1
                        -
                          type: users
                          id: '2'
                          links:
                            self: /users/2
                        -
                          type: users
                          id: '3'
                          links:
                            self: /users/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: users
                            id: '1'
                            links:
                              self: /users/1
                          -
                            type: users
                            id: '2'
                            links:
                              self: /users/2
                          -
                            type: users
                            id: '3'
                            links:
                              self: /users/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: users
                            id:
                              type: string
                              example: '1'
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /users/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: 'The resource identifier for a Users.'
                  example:
                    -
                      id: '1'
                      type: users
                  items:
                    type: object
              required:
                - data
      security: []
    delete:
      summary: 'Remove from Users relationships'
      operationId: removeFromUsersRelationships
      description: 'Remove identifiers from the Users relationship of a specific Role.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: 'The resource identifier for a Users.'
                  example:
                    -
                      id: '1'
                      type: users
                  items:
                    type: object
              required:
                - data
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'roles' resource"
        example: 1
        required: true
        schema:
          type: number
  /users:
    post:
      summary: 'User registration'
      operationId: userRegistration
      description: '**New user registration**'
      parameters:
        -
          in: query
          name: 'fields[users]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `roles`"
          example: roles
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `roles`"
            example: roles
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: users
                    id: '1'
                    attributes:
                      name: 'Clara Cronin V'
                      email: wleuschke@example.net
                    links:
                      self: /users/1
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: users
                      id:
                        type: string
                        example: '1'
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: 'Clara Cronin V'
                          email:
                            type: string
                            example: wleuschke@example.net
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /users/1
      tags:
        - Users
      requestBody:
        required: false
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  nullable: false
                  properties:
                    type:
                      type: string
                      description: ''
                      example: users
                      nullable: false
                      enum:
                        - users
                    attributes:
                      type: object
                      description: ''
                      nullable: false
                      properties:
                        email:
                          type: string
                          description: 'Must be a valid email address.'
                          example: gbailey@example.net
                          nullable: false
                        password:
                          type: string
                          description: 'Must be at least 8 characters.'
                          example: '+-0pBNvYgxwmi/#iw'
                          nullable: false
                        name:
                          type: string
                          description: 'Must not be greater than 255 characters.'
                          example: u
                          nullable: false
                      required:
                        - email
                        - password
                        - name
                  required:
                    - type
      security: []
    get:
      summary: 'List Users'
      operationId: listUsers
      description: 'Retrieve a list of Users.'
      parameters:
        -
          in: query
          name: 'fields[users]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `roles`"
          example: roles
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `roles`"
            example: roles
            nullable: false
        -
          in: query
          name: 'page[number]'
          description: 'Page number. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
          example: 1
          required: false
          schema:
            type: number
            description: 'Page number. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
            example: 1
            nullable: false
        -
          in: query
          name: 'page[size]'
          description: 'Number of results per page. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
          example: 10
          required: false
          schema:
            type: number
            description: 'Number of results per page. ([Spec](https://jsonapi.org/format/#fetching-pagination))'
            example: 10
            nullable: false
        -
          in: query
          name: sort
          description: "Sort the results by attributes. Prefix with `-` for descending order. ([Spec](https://jsonapi.org/format/#fetching-sorting))\n\n**Available sort fields:** `name`, `email`"
          required: false
          schema:
            type: string
            description: "Sort the results by attributes. Prefix with `-` for descending order. ([Spec](https://jsonapi.org/format/#fetching-sorting))\n\n**Available sort fields:** `name`, `email`"
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      type: users
                      id: '1'
                      attributes:
                        name: 'Mrs. Kirsten Ward'
                        email: cbeier@example.com
                      links:
                        self: /users/1
                    -
                      type: users
                      id: '2'
                      attributes:
                        name: 'Dr. Alan Green'
                        email: oreilly.jacques@example.com
                      links:
                        self: /users/2
                    -
                      type: users
                      id: '3'
                      attributes:
                        name: 'Cristobal Smith'
                        email: bcruickshank@example.org
                      links:
                        self: /users/3
                  meta:
                    pagination:
                      total: 100
                      count: 20
                      per_page: 3
                      current_page: 1
                      total_pages: 5
                  links:
                    self: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    first: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    next: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    last: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                properties:
                  data:
                    type: array
                    example:
                      -
                        type: users
                        id: '1'
                        attributes:
                          name: 'Mrs. Kirsten Ward'
                          email: cbeier@example.com
                        links:
                          self: /users/1
                      -
                        type: users
                        id: '2'
                        attributes:
                          name: 'Dr. Alan Green'
                          email: oreilly.jacques@example.com
                        links:
                          self: /users/2
                      -
                        type: users
                        id: '3'
                        attributes:
                          name: 'Cristobal Smith'
                          email: bcruickshank@example.org
                        links:
                          self: /users/3
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: users
                        id:
                          type: string
                          example: '1'
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                              example: 'Mrs. Kirsten Ward'
                            email:
                              type: string
                              example: cbeier@example.com
                        links:
                          type: object
                          properties:
                            self:
                              type: string
                              example: /users/1
                  meta:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 100
                          count:
                            type: integer
                            example: 20
                          per_page:
                            type: integer
                            example: 3
                          current_page:
                            type: integer
                            example: 1
                          total_pages:
                            type: integer
                            example: 5
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      first:
                        type: string
                        example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      next:
                        type: string
                        example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                      last:
                        type: string
                        example: 'users?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Users
      security: []
  /users/me:
    get:
      summary: 'User Me'
      operationId: userMe
      description: "Return currently authenticated user's resource.\nShould be used with authentication logic, first login than use this endpoint."
      parameters:
        -
          in: query
          name: 'fields[users]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `roles`"
          example: roles
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `roles`"
            example: roles
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: users
                    id: '1'
                    attributes:
                      name: 'Donny Leffler'
                      email: mitchell.matilda@example.org
                    links:
                      self: /users/1
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: users
                      id:
                        type: string
                        example: '1'
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: 'Donny Leffler'
                          email:
                            type: string
                            example: mitchell.matilda@example.org
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /users/1
      tags:
        - Users
      security: []
  '/users/{id}':
    patch:
      summary: 'Update User'
      operationId: updateUser
      description: 'Update a specific User by ID.'
      parameters:
        -
          in: query
          name: 'fields[users]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `roles`"
          example: roles
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `roles`"
            example: roles
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: users
                    id: '1'
                    attributes:
                      name: 'Clara Cronin V'
                      email: ferne52@example.com
                    links:
                      self: /users/1
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: users
                      id:
                        type: string
                        example: '1'
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: 'Clara Cronin V'
                          email:
                            type: string
                            example: ferne52@example.com
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /users/1
      tags:
        - Users
      requestBody:
        required: false
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      nullable: false
                      properties:
                        email:
                          type: string
                          description: 'Must be a valid email address. Must not be greater than 255 characters.'
                          example: gbailey@example.net
                          nullable: false
                        password:
                          type: string
                          description: 'Must be at least 6 characters.'
                          example: '+-0pBNvYgxwmi/#iw'
                          nullable: false
                        name:
                          type: string
                          description: 'Must not be greater than 255 characters.'
                          example: u
                          nullable: false
      security: []
    get:
      summary: 'Show User'
      operationId: showUser
      description: 'Retrieve a specific User by ID.'
      parameters:
        -
          in: query
          name: 'fields[users]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `roles`"
          example: roles
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `roles`"
            example: roles
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: users
                    id: '1'
                    attributes:
                      name: 'Mr. Gilbert Swift V'
                      email: hirthe.theo@example.com
                    links:
                      self: /users/1
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: users
                      id:
                        type: string
                        example: '1'
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: 'Mr. Gilbert Swift V'
                          email:
                            type: string
                            example: hirthe.theo@example.com
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: /users/1
      tags:
        - Users
      security: []
    delete:
      summary: 'Delete User'
      operationId: deleteUser
      description: 'Delete a specific User by ID.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - Users
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'users' resource"
        example: 1
        required: true
        schema:
          type: number
  '/users/{id}/roles':
    get:
      summary: 'List related Roles'
      operationId: listRelatedRoles
      description: 'Retrieve the list of related Roles for a specific User.'
      parameters:
        -
          in: query
          name: 'fields[users]'
          description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
          required: false
          schema:
            type: string
            description: "Sparse fieldsets - specify which fields to include in the response for each resource type. ([Spec](https://jsonapi.org/format/#fetching-sparse-fieldsets))\n\n**Available fields:** `name`, `email`"
            nullable: false
        -
          in: query
          name: include
          description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `roles`"
          example: roles
          required: false
          schema:
            type: string
            description: "Include related resources. ([Spec](https://jsonapi.org/format/#fetching-includes))\n\n**Available includes:** `roles`"
            example: roles
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: roles
                          id: '1'
                          attributes:
                            name: modi
                            permissions: []
                          links:
                            self: /roles/1
                        -
                          type: roles
                          id: '2'
                          attributes:
                            name: ipsum
                            permissions: []
                          links:
                            self: /roles/2
                        -
                          type: roles
                          id: '3'
                          attributes:
                            name: nostrum
                            permissions: []
                          links:
                            self: /roles/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: roles
                            id: '1'
                            attributes:
                              name: modi
                              permissions: []
                            links:
                              self: /roles/1
                          -
                            type: roles
                            id: '2'
                            attributes:
                              name: ipsum
                              permissions: []
                            links:
                              self: /roles/2
                          -
                            type: roles
                            id: '3'
                            attributes:
                              name: nostrum
                              permissions: []
                            links:
                              self: /roles/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: roles
                            id:
                              type: string
                              example: '1'
                            attributes:
                              type: object
                              properties:
                                name:
                                  type: string
                                  example: modi
                                permissions:
                                  type: array
                                  example: []
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /roles/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: roles
                          id: '1'
                          attributes:
                            name: omnis
                            permissions: []
                          links:
                            self: /roles/1
                        -
                          type: roles
                          id: '2'
                          attributes:
                            name: autem
                            permissions: []
                          links:
                            self: /roles/2
                        -
                          type: roles
                          id: '3'
                          attributes:
                            name: consequatur
                            permissions: []
                          links:
                            self: /roles/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: roles
                            id: '1'
                            attributes:
                              name: omnis
                              permissions: []
                            links:
                              self: /roles/1
                          -
                            type: roles
                            id: '2'
                            attributes:
                              name: autem
                              permissions: []
                            links:
                              self: /roles/2
                          -
                            type: roles
                            id: '3'
                            attributes:
                              name: consequatur
                              permissions: []
                            links:
                              self: /roles/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: roles
                            id:
                              type: string
                              example: '1'
                            attributes:
                              type: object
                              properties:
                                name:
                                  type: string
                                  example: omnis
                                permissions:
                                  type: array
                                  example: []
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /roles/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Users
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'users' resource"
        example: 1
        required: true
        schema:
          type: number
  '/users/{id}/relationships/roles':
    get:
      summary: 'Show Roles relationships'
      operationId: showRolesRelationships
      description: 'Retrieve the identifiers of the related Roles for a specific User.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: roles
                          id: '1'
                          links:
                            self: /roles/1
                        -
                          type: roles
                          id: '2'
                          links:
                            self: /roles/2
                        -
                          type: roles
                          id: '3'
                          links:
                            self: /roles/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: roles
                            id: '1'
                            links:
                              self: /roles/1
                          -
                            type: roles
                            id: '2'
                            links:
                              self: /roles/2
                          -
                            type: roles
                            id: '3'
                            links:
                              self: /roles/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: roles
                            id:
                              type: string
                              example: '1'
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /roles/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: roles
                          id: '1'
                          links:
                            self: /roles/1
                        -
                          type: roles
                          id: '2'
                          links:
                            self: /roles/2
                        -
                          type: roles
                          id: '3'
                          links:
                            self: /roles/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: roles
                            id: '1'
                            links:
                              self: /roles/1
                          -
                            type: roles
                            id: '2'
                            links:
                              self: /roles/2
                          -
                            type: roles
                            id: '3'
                            links:
                              self: /roles/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: roles
                            id:
                              type: string
                              example: '1'
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /roles/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Users
      security: []
    post:
      summary: 'Add to Roles relationships'
      operationId: addToRolesRelationships
      description: 'Add identifiers to the Roles relationship of a specific User.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: roles
                          id: '1'
                          links:
                            self: /roles/1
                        -
                          type: roles
                          id: '2'
                          links:
                            self: /roles/2
                        -
                          type: roles
                          id: '3'
                          links:
                            self: /roles/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: roles
                            id: '1'
                            links:
                              self: /roles/1
                          -
                            type: roles
                            id: '2'
                            links:
                              self: /roles/2
                          -
                            type: roles
                            id: '3'
                            links:
                              self: /roles/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: roles
                            id:
                              type: string
                              example: '1'
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /roles/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: roles
                          id: '1'
                          links:
                            self: /roles/1
                        -
                          type: roles
                          id: '2'
                          links:
                            self: /roles/2
                        -
                          type: roles
                          id: '3'
                          links:
                            self: /roles/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: roles
                            id: '1'
                            links:
                              self: /roles/1
                          -
                            type: roles
                            id: '2'
                            links:
                              self: /roles/2
                          -
                            type: roles
                            id: '3'
                            links:
                              self: /roles/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: roles
                            id:
                              type: string
                              example: '1'
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /roles/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: 'The resource identifier for a Roles.'
                  example:
                    -
                      id: '1'
                      type: roles
                  items:
                    type: object
              required:
                - data
      security: []
    patch:
      summary: 'Update Roles relationships'
      operationId: updateRolesRelationships
      description: 'Replace all identifiers in the Roles relationship of a specific User.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: roles
                          id: '1'
                          links:
                            self: /roles/1
                        -
                          type: roles
                          id: '2'
                          links:
                            self: /roles/2
                        -
                          type: roles
                          id: '3'
                          links:
                            self: /roles/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: roles
                            id: '1'
                            links:
                              self: /roles/1
                          -
                            type: roles
                            id: '2'
                            links:
                              self: /roles/2
                          -
                            type: roles
                            id: '3'
                            links:
                              self: /roles/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: roles
                            id:
                              type: string
                              example: '1'
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /roles/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                  -
                    description: ''
                    type: object
                    example:
                      data:
                        -
                          type: roles
                          id: '1'
                          links:
                            self: /roles/1
                        -
                          type: roles
                          id: '2'
                          links:
                            self: /roles/2
                        -
                          type: roles
                          id: '3'
                          links:
                            self: /roles/3
                      meta:
                        pagination:
                          total: 100
                          count: 20
                          per_page: 3
                          current_page: 1
                          total_pages: 5
                      links:
                        self: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        first: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        next: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                        last: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                    properties:
                      data:
                        type: array
                        example:
                          -
                            type: roles
                            id: '1'
                            links:
                              self: /roles/1
                          -
                            type: roles
                            id: '2'
                            links:
                              self: /roles/2
                          -
                            type: roles
                            id: '3'
                            links:
                              self: /roles/3
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: roles
                            id:
                              type: string
                              example: '1'
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  example: /roles/1
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              count:
                                type: integer
                                example: 20
                              per_page:
                                type: integer
                                example: 3
                              current_page:
                                type: integer
                                example: 1
                              total_pages:
                                type: integer
                                example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          first:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          next:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
                          last:
                            type: string
                            example: 'roles?page%5Bnumber%5D=1&page%5Bsize%5D=3'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: 'The resource identifier for a Roles.'
                  example:
                    -
                      id: '1'
                      type: roles
                  items:
                    type: object
              required:
                - data
      security: []
    delete:
      summary: 'Remove from Roles relationships'
      operationId: removeFromRolesRelationships
      description: 'Remove identifiers from the Roles relationship of a specific User.'
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: 'The resource identifier for a Roles.'
                  example:
                    -
                      id: '1'
                      type: roles
                  items:
                    type: object
              required:
                - data
      security: []
    parameters:
      -
        in: path
        name: id
        description: "The unique identifier of the 'users' resource"
        example: 1
        required: true
        schema:
          type: number
