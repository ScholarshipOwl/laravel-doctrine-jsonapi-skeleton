# Windsurf Rules for Laravel Doctrine JSON:API Skeleton

## Core Principles
- Follow PSR-12 coding standard for all PHP code.
- Manage PHP dependencies with Composer only.
- Always run tests before pushing code to the repository.
- Default branch is `main`.
- Sensitive files (such as `.env`, `node_modules/`, `vendor/`) must not be committed.

## Workflow
- Pull requests must be reviewed before merging.
- Branches must be up-to-date with `main` before merging.
- Update documentation for any API changes.

## Laravel
- Use Laravel 12 for development.
- Look into `config` and `.env` files for configuration.

## API Guidelines
- Expose only API routes; do not use web or Blade routes.
- Document APIs with Scribe and provide OpenAPI specifications.

## Migrations
- Use Doctrine migrations for all database schema changes.

## Entities
- Use Doctrine entities (not Eloquent models).
- Entity setters should return `$this` for method chaining.
- Entity properties must be `private` and use `camelCase` naming.

### Entity Factories
- Define all entity factories in `database/factories` using `LaravelDoctrine\ORM\Testing\Factory`.
- Use the `entity()` helper or `$factory->of()` for generating entities in tests and seeds.
- Persisted entities: use `entity(...)->create()`.
- Non-persisted entities: use `entity(...)->make()`.
- Factory definitions: use Doctrine entity property names (not DB columns).
- Support custom factory types via `defineAs` and named types.
- Example usage in tests:
  ```php
  $user = entity(App\Entities\User::class)->create();
  $users = entity(App\Entities\User::class, 3)->make();
  $admin = entity(App\Entities\User::class, 'admin')->create(['name' => 'Alice']);
  ```

## Authorization
- Use Laravel's authorization system for API endpoints.
- Policies can be find at `app/Policies`.

## Doctrine Extensions
- Enable Doctrine extensions for features like sluggable, timestamps, etc.

## Unit Tests
- Write unit tests for all entities and controllers.
- Use camelCase in the test names.
- Use command `./vendor/bin/phpunit` to run tests.
- On test failure make sure link failed tests with line numbers in response message. Link them in format that Cascade can understand and the links are clickable and will open file in editor.
- Use options `--stop-on-failure` and `--stop-on-error` to stop on first failure or error, use this approach by default.
- Use `--filter` option if changes done in single controller and we still in development phase.

## Doctrine
- Use Doctrine ORM for database interactions.
- Use Doctrine Migrations for database schema changes.
- Use Doctrine Extensions for features like sluggable, timestamps, etc.
- We can compare two entities with `===` operator without checking their identifiers.

## Laravel Doctrine JSON:API
- All API endpoints must be JSON:API compliant.
- Controllers must be thin and contain minimal logic, the logic should be places in Actions classes and classes could use services.
- Actions from `Sowl\JsonApi\Action` can be reused in many custom cases.

### JSON:API Controllers
- Use `App\Http\Controllers\Controller` as base controller.
- Folder structure: `app/Http/Controllers/{ResourceType}/{ControllerName}`
- Use `Sowl\JsonApi\Request` as request class.
- Use `Sowl\JsonApi\Response` as response class.
- Use `Sowl\JsonApi\AbstractAction` as action class.

### JSON:API Actions
- Use `Sowl\JsonApi\AbstractAction` as base action.
- Use `Sowl\JsonApi\Action` as action class.
- Folder structure: `app/Http/Controllers/{ResourceType}/{ActionName}`

### JSON:API Requests
- Use `Sowl\JsonApi\Request` as request class.
- Folder structure: `app/Http/Controllers/{ResourceType}/{RequestName}`
- Create custom controllers for create and update or custom requests with properly defined validation rules.

### JSON:API Response
- Use `Sowl\JsonApi\Response` as response class.


## Git & Commit Rules
- Use conventional commit messages. For more details, see the [Git Commit Rules](https://github.com/ScholarshipOwl/laravel-doctrine-jsonapi/blob/main/docs/Setup.md#git-commit-rules).
- Do commits only when you asked for it.
- Review diff of staged files before committing.
- Only commit staged files.
- Do not add files to the index automatically.
- When you asked to commit run a git diff and prepare commit message based on the changes.

## Skeleton Development
- Log all major setup and architectural changes in `docs/Setup.md` as a step-by-step tutorial.
- Update `docs/Setup.md` when you make changes to the skeleton.

---

These rules are designed to keep the codebase clean, maintainable, and consistent for all contributors. Please follow them strictly for every contribution.
