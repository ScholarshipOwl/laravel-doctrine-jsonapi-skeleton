# Windsurf Rules for Laravel Doctrine JSON:API Skeleton

## Core Principles
- Follow PSR-12 coding standard for all PHP code.
- Manage PHP dependencies with Composer only.
- Always run tests before pushing code to the repository.
- Default branch is `main`.
- Sensitive files (such as `.env`, `node_modules/`, `vendor/`) must not be committed.
- Always use `use` for importing classes.
- Do not add docblock of @param if param type is already defined.
- Do not add docblock of @return if return type is already defined.
- Always import class that you are using in a generated code, do not use fully qualified names, only imported names. Make sure to import all classes that you are using in a generated code.

## Workflow
- Pull requests must be reviewed before merging.
- Branches must be up-to-date with `main` before merging.
- Update documentation for any API changes.

## Laravel
- Use Laravel 12 for development.
- Look into `config` and `.env` files for configuration.

## API Guidelines
- Expose only API routes; do not use web or Blade routes.
- Document APIs with Scribe and provide OpenAPI specifications.

## Migrations
- Use Doctrine migrations for all database schema changes.

## Entities
- Use Doctrine entities (not Eloquent models).
- Entity setters should return `$this` for method chaining.
- Entity properties must be `private` and use `camelCase` naming.
- Use attributes for doctrine metadata definition.

### Entity Factories
- Define all entity factories in `database/factories` using `LaravelDoctrine\ORM\Testing\Factory`.
- Use the `entity()` helper or `$factory->of()` for generating entities in tests and seeds.
- Persisted entities: use `entity(...)->create()`.
- Non-persisted entities: use `entity(...)->make()`.
- Factory definitions: use Doctrine entity property names (not DB columns).
- Support custom factory types via `defineAs` and named types.
- Example usage in tests:
  ```php
  $user = entity(App\Entities\User::class)->create();
  $users = entity(App\Entities\User::class, 3)->make();
  $admin = entity(App\Entities\User::class, 'admin')->create(['name' => 'Alice']);
  ```

## Authorization
- Use Laravel's authorization system for API endpoints.
- Policies can be find at `app/Policies`.

## Doctrine Extensions
- Enable Doctrine extensions for features like sluggable, timestamps, etc.

## Unit Tests
- Write unit tests for all entities and controllers.
- Run tests after you doing change to confirm that it is working.
- Use camelCase in the test names.
- Use command `./vendor/bin/phpunit` to run tests.
- On test failure make sure link failed tests with line numbers in response message. Link them in format that Cascade can understand and the links are clickable and will open file in editor.
- Use options `--stop-on-failure` and `--stop-on-error` to stop on first failure or error, use this approach by default.
- Use `--filter` option if changes done in single controller and we still in development phase.

## Doctrine
- Use Doctrine ORM for database interactions.
- Use Doctrine Migrations for database schema changes.
- Use Doctrine Extensions for features like sluggable, timestamps, etc.
- We can compare two entities with `===` operator without checking their identifiers.

## Laravel Doctrine JSON:API
- All API endpoints must be JSON:API compliant.
- Controllers must be thin and contain minimal logic, the logic should be places in Actions classes and classes could use services.
- Actions from `Sowl\JsonApi\Action` can be reused in many custom cases.

### JSON:API Resources
- `Sowl\JsonApi\ResourceInterface` must be implemented by each resource entity.
- Resources by default are in `app/Entities` folder.
- `getId()` method must be implemented by each resource entity.
- Use `static::getResourceType()` method to define resource type, put this method in the top of the class.
- Use `static::transformer()` method to define transformer, put this method in the top of the class.
- Use `static::relationships()` method to define relationships to other resources, put this method in the top of the class.

#### JSON:API Resource Relationships
- Use `Sowl\JsonApi\Relationships\MemoizeRelationshipsTrait` for resources with relationships.
- Use `Sowl\JsonApi\Relationships\ToOneRelationship` for ToOne relationships.
- Use `Sowl\JsonApi\Relationships\ToManyRelationship` for ToMany relationships.
- Collections or properties that do not reference resource entities (such as arrays of strings, primitive types, or non-resource objects) should not be defined as JSON:API relationships. Instead, expose them as attributes in the transformer.
-This ensures that only true resource-to-resource links are represented as relationships in the JSON:API output, maintaining semantic correctness and consistency with the JSON:API specification.
- Example:
  ```php
  public static function relationships(): RelationshipsCollection
  {
      return static::memoizeRelationships(fn () => [
          ToOneRelationship::create('author', User::class),
          ToManyRelationship::create('comments', Comment::class),
      ]);
  }
  ```

### JSON:API Transformers
- Use `Sowl\JsonApi\AbstractTransformer` as base transformer.
- Transformers by default are in `app/Transformers` folder.
- Use `transform({ResourceClass} %resourceType%)` method to transform the resource, the %resourceType% variable name build from resource type.
- When generating from scratch set `$availableIncludes` property with the list of `::relationships()` that implementing `Sowl\JsonApi\ResourceInterface`.
- Implement `include{Relationship}` method for each include in $availableIncludes property.
- Always provide `{ResourceClass}::getResourceType()` as a 3rd parameter to the `item()` and `collection()` methods.

### JSON:API Controllers
- Use `App\Http\Controllers\Controller` as base controller.
- Folder structure: `app/Http/Controllers/{ResourceType}/{ControllerName}`
- Use `Sowl\JsonApi\Request` as request class.
- Use `Sowl\JsonApi\Response` as response class.
- Use `Sowl\JsonApi\AbstractAction` as action class.

### JSON:API Actions
- Use `Sowl\JsonApi\AbstractAction` as base action.
- Use `Sowl\JsonApi\Action` as action class.
- Folder structure: `app/Http/Controllers/{ResourceType}/{ActionName}`
- Use `request()` method if you need a request, this request validated when resolved in controller.
- Append a typehint using docblock in the action class definition for the request @property and @method also repository() @method, use generic typehint.
- Action must response with `Sowl\JsonApi\Response` if it is not exception and it is JSON:API endpoint.
- Use `$request->getData()` method to retrieve the validated data or `$request->validated($key)` to retrieve a specific validated value.
- Use `repository()` method for Doctrine repository.
- Use `rm()` method for resource manager.
- Use `getId()` method to retrieve the id from the request.
- Use `repository()->em()` if you need to use Doctrine EntityManager.
- Use `response()` method that returns ResponseFactory for creating responses.

### JSON:API Requests
- Use `Sowl\JsonApi\Request` as request class.
- Folder structure: `app/Http/Controllers/{ResourceType}/{RequestName}`
- Create custom controllers for create and update or custom requests with properly defined validation rules.
- Append a @extends docblock to class with providing generic type of resource.
- Use `dataRules` method for validation rules of the `data` part of the request, override this method to customize data validation rules.
- Use `queryParameterRules` method for validation rules of the query parameters, override this method to customize query parameter validation rules calling parent method.
- Method `resource` is used to retrieve the resource entity from the request, it's using `id` route parameter.

### JSON:API Response
- Use `Sowl\JsonApi\Response` as response class.
- Use `response()` method that returns ResponseFactory for creating responses.
- Use `item()` method to create a single resource response.
- Use `collection()` method to create a collection of resources response.
- Use `query()` method to create a query response, used for pagination.

### JSON:API Repositories
- Use `Sowl\JsonApi\ResourceRepository` as repository class.
- Folder structure: `app/Repositories/{RepositoryName}`
- If custom repository not exists use generic `ResourceRepository<Resource>`

## Git & Commit Rules
- Use conventional commit messages. For more details, see the [Git Commit Rules](https://github.com/ScholarshipOwl/laravel-doctrine-jsonapi/blob/main/docs/Setup.md#git-commit-rules).
- When doing commits relay on the client to add files to the commit.
- Use `git diff --cached` for generation of commit messages.

## Skeleton Development
- Log all major setup and architectural changes in `docs/Setup.md` as a step-by-step tutorial.
- Update `docs/Setup.md` when you make changes to the skeleton.

---

These rules are designed to keep the codebase clean, maintainable, and consistent for all contributors. Please follow them strictly for every contribution.
